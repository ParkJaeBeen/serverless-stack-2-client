{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\program_pc\\\\serverless-stack-2-client\\\\src\\\\containers\\\\NewNote.js\";\nimport React, { useRef, useState } from \"react\";\nimport { API } from \"aws-amplify\";\nimport { useHistory } from \"react-router-dom\";\nimport { FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\nimport LoaderButton from \"../components/LoaderButton\";\nimport { onError } from \"../libs/errorLib\";\nimport { s3Upload } from \"../libs/awsLib\";\nimport config from \"../config\";\nimport \"./NewNote.css\";\nexport default function NewNote() {\n  const file = useRef(null);\n  const history = useHistory();\n  const [content, setContent] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  function validateForm() {\n    return content.length > 0;\n  }\n\n  function handleFileChange(event) {\n    file.current = event.target.files[0];\n  }\n\n  async function handleSubmit(event) {\n    event.preventDefault();\n\n    if (file.current && file.current.size > config.MAX_ATTACHMENT_SIZE) {\n      alert(`Please pick a file smaller than ${config.MAX_ATTACHMENT_SIZE / 1000000} MB.`);\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      const attachment = file.current ? await s3Upload(file.current) : null;\n      await createNote({\n        content,\n        attachment\n      });\n      history.push(\"/\");\n    } catch (e) {\n      onError(e);\n      setIsLoading(false);\n    }\n  }\n\n  function createNote(note) {\n    return API.post(\"notes\", \"/notes\", {\n      body: note\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"NewNote\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    controlId: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    value: content,\n    componentClass: \"textarea\",\n    onChange: e => setContent(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(FormGroup, {\n    controlId: \"file\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ControlLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }, \"Attachment\"), /*#__PURE__*/React.createElement(FormControl, {\n    onChange: handleFileChange,\n    type: \"file\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(LoaderButton, {\n    block: true,\n    type: \"submit\",\n    bsSize: \"large\",\n    bsStyle: \"primary\",\n    isLoading: isLoading,\n    disabled: !validateForm(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, \"Create\")));\n}","map":{"version":3,"sources":["C:/Users/program_pc/serverless-stack-2-client/src/containers/NewNote.js"],"names":["React","useRef","useState","API","useHistory","FormGroup","FormControl","ControlLabel","LoaderButton","onError","s3Upload","config","NewNote","file","history","content","setContent","isLoading","setIsLoading","validateForm","length","handleFileChange","event","current","target","files","handleSubmit","preventDefault","size","MAX_ATTACHMENT_SIZE","alert","attachment","createNote","push","e","note","post","body","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,SAASC,GAAT,QAAoB,aAApB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,SAAT,EAAoBC,WAApB,EAAiCC,YAAjC,QAAqD,iBAArD;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,SAASC,OAAT,QAAwB,kBAAxB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAO,eAAP;AAEA,eAAe,SAASC,OAAT,GAAmB;AAChC,QAAMC,IAAI,GAAGZ,MAAM,CAAC,IAAD,CAAnB;AACA,QAAMa,OAAO,GAAGV,UAAU,EAA1B;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACe,SAAD,EAAYC,YAAZ,IAA4BhB,QAAQ,CAAC,KAAD,CAA1C;;AAEA,WAASiB,YAAT,GAAwB;AACtB,WAAOJ,OAAO,CAACK,MAAR,GAAiB,CAAxB;AACD;;AAED,WAASC,gBAAT,CAA0BC,KAA1B,EAAiC;AAC/BT,IAAAA,IAAI,CAACU,OAAL,GAAeD,KAAK,CAACE,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAAf;AACD;;AAED,iBAAeC,YAAf,CAA4BJ,KAA5B,EAAmC;AACjCA,IAAAA,KAAK,CAACK,cAAN;;AAEA,QAAId,IAAI,CAACU,OAAL,IAAgBV,IAAI,CAACU,OAAL,CAAaK,IAAb,GAAoBjB,MAAM,CAACkB,mBAA/C,EAAoE;AAClEC,MAAAA,KAAK,CACF,mCACCnB,MAAM,CAACkB,mBAAP,GAA6B,OAC9B,MAHE,CAAL;AAKA;AACD;;AAEDX,IAAAA,YAAY,CAAC,IAAD,CAAZ;;AAEA,QAAI;AACF,YAAMa,UAAU,GAAGlB,IAAI,CAACU,OAAL,GAAe,MAAMb,QAAQ,CAACG,IAAI,CAACU,OAAN,CAA7B,GAA8C,IAAjE;AAEA,YAAMS,UAAU,CAAC;AAAEjB,QAAAA,OAAF;AAAWgB,QAAAA;AAAX,OAAD,CAAhB;AACAjB,MAAAA,OAAO,CAACmB,IAAR,CAAa,GAAb;AACD,KALD,CAKE,OAAOC,CAAP,EAAU;AACVzB,MAAAA,OAAO,CAACyB,CAAD,CAAP;AACAhB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF;;AAED,WAASc,UAAT,CAAoBG,IAApB,EAA0B;AACxB,WAAOhC,GAAG,CAACiC,IAAJ,CAAS,OAAT,EAAkB,QAAlB,EAA4B;AACjCC,MAAAA,IAAI,EAAEF;AAD2B,KAA5B,CAAP;AAGD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAM,IAAA,QAAQ,EAAET,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAC,SAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,WAAD;AACE,IAAA,KAAK,EAAEX,OADT;AAEE,IAAA,cAAc,EAAC,UAFjB;AAGE,IAAA,QAAQ,EAAEmB,CAAC,IAAIlB,UAAU,CAACkB,CAAC,CAACV,MAAF,CAASc,KAAV,CAH3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,eAQE,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAC,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,oBAAC,WAAD;AAAa,IAAA,QAAQ,EAAEjB,gBAAvB;AAAyC,IAAA,IAAI,EAAC,MAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CARF,eAYE,oBAAC,YAAD;AACE,IAAA,KAAK,MADP;AAEE,IAAA,IAAI,EAAC,QAFP;AAGE,IAAA,MAAM,EAAC,OAHT;AAIE,IAAA,OAAO,EAAC,SAJV;AAKE,IAAA,SAAS,EAAEJ,SALb;AAME,IAAA,QAAQ,EAAE,CAACE,YAAY,EANzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAZF,CADF,CADF;AA2BD","sourcesContent":["import React, { useRef, useState } from \"react\";\r\nimport { API } from \"aws-amplify\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\r\nimport LoaderButton from \"../components/LoaderButton\";\r\nimport { onError } from \"../libs/errorLib\";\r\nimport { s3Upload } from \"../libs/awsLib\";\r\nimport config from \"../config\";\r\nimport \"./NewNote.css\";\r\n\r\nexport default function NewNote() {\r\n  const file = useRef(null);\r\n  const history = useHistory();\r\n  const [content, setContent] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  function validateForm() {\r\n    return content.length > 0;\r\n  }\r\n\r\n  function handleFileChange(event) {\r\n    file.current = event.target.files[0];\r\n  }\r\n\r\n  async function handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    if (file.current && file.current.size > config.MAX_ATTACHMENT_SIZE) {\r\n      alert(\r\n        `Please pick a file smaller than ${\r\n          config.MAX_ATTACHMENT_SIZE / 1000000\r\n        } MB.`\r\n      );\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      const attachment = file.current ? await s3Upload(file.current) : null;\r\n\r\n      await createNote({ content, attachment });\r\n      history.push(\"/\");\r\n    } catch (e) {\r\n      onError(e);\r\n      setIsLoading(false);\r\n    }\r\n  }\r\n\r\n  function createNote(note) {\r\n    return API.post(\"notes\", \"/notes\", {\r\n      body: note\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"NewNote\">\r\n      <form onSubmit={handleSubmit}>\r\n        <FormGroup controlId=\"content\">\r\n          <FormControl\r\n            value={content}\r\n            componentClass=\"textarea\"\r\n            onChange={e => setContent(e.target.value)}\r\n          />\r\n        </FormGroup>\r\n        <FormGroup controlId=\"file\">\r\n          <ControlLabel>Attachment</ControlLabel>\r\n          <FormControl onChange={handleFileChange} type=\"file\" />\r\n        </FormGroup>\r\n        <LoaderButton\r\n          block\r\n          type=\"submit\"\r\n          bsSize=\"large\"\r\n          bsStyle=\"primary\"\r\n          isLoading={isLoading}\r\n          disabled={!validateForm()}\r\n        >\r\n          Create\r\n        </LoaderButton>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}